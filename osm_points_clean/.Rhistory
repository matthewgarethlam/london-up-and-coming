waitrose <- st_transform(waitrose, "+init=epsg:27700", st_crs(27700))
gails <- st_transform(gails, "+init=epsg:27700", st_crs(27700))
cafes <- cafes %>%  st_intersection(ldnb)
st_crs(ldnb)
st_crs(cafes)
ldnb <- st_transform(ldnb, "+init=epsg:27700", st_crs(27700))
#London Shapefiles
ldnb <- readOGR("ESRI" ,"London_Borough_Excluding_MHW")
ldnb <- st_transform(ldnb, "+init=epsg:27700", st_crs(27700))
st_crs(ldnb)
#remove the points which lie outside of London
cafes <- cafes %>%  st_intersection(ldnb)
library(geojsonio)
cafes <- st_read("london_cafes.geojson")
setwd("~/Documents/GitHub/london-up-and-coming/osm_raw_data")
library(geojsonio)
cafes <- st_read("london_cafes.geojson")
setwd("~/Documents/GitHub/london-up-and-coming")
cafes <- st_read("osm_raw_data/london_cafes.geojson")
cafes <- st_read("osm_raw_data/london_cafes.geojson")
chicken <- st_read("osm_raw_data/london_chicken.geojson")
gails <- st_read("osm_raw_data/london_gails.geojson")
waitrose <- st_read("osm_raw_data/london_waitrose.geojson")
cafes <- st_transform(cafes, crs=27700)
chicken <- st_transform(chicken, crs=27700)
waitrose <- st_transform(waitrose, crs=27700)
gails <- st_transform(gails, crs=27700)
cafes <- cafes %>%  st_intersection(ldnb)
st_crs(cafes)=st_crs(ldnb)
st_crs(cafes)=st_crs(ldnb)
st_crs(chicken)=st_crs(ldnb)
st_crs(waitrose)=st_crs(ldnb)
st_crs(gails)=st_crs(ldnb)
#remove the points which lie outside of London
cafes <- cafes %>%  st_intersection(ldnb)
class(cafes)
#make into points
cafes$geometry
#make into points
cafes$geometry[1]
#make into points
cafes %>% st_intersection(ldnb)
class(ldnb)
cafes %>% st_intersection(ldnb)
ldnb <- as_Spatial(ldnb)
cafes %>% st_intersection(ldnb)
cafes <- as_Spatial(cafes)
#make into points
cafes %>% st_intersection(ldnb)
cafes
plot(chicken)
plot(chicken)
cafes <- st_as_sf(cafes)
#remove the points which lie outside of London
cafes <- cafes %>%  st_intersection(ldnb)
ldnb <- st_as_sf(ldnb)
#remove the points which lie outside of London
cafes <- cafes %>%  st_intersection(ldnb)
chicken <- st_as_sf(chicken)
gails<- st_as_sf(gails)
waitrose <- st_as_sf(waitrose)
chicken<- chicken%>%  st_intersection(ldnb)
gails <- gails %>% st_intersection(ldnb)
objectlist <- c(cafes, chicken, gails, waitrose, ldnb)
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
for (object in cafes, chicken, gails, waitrose, ldnb){
objectlist <- list(cafes, chicken, gails, waitrose, ldnb)
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
cafes
plot(chicken)
plot(chicken)
#fixing projections
for (object in objectlist){
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
return(object)
}
#fixing projections
for (object in objectlist){
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
object <- st_as_sf(object)
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
# create a window of observation
window <- as.owin(ldnb)
library(spatstat)
# create a window of observation
window <- as.owin(ldnb)
cafes_xy <- cafes %>%
st_coordinates()
cafes %>%
st_coordinates()
# extract coordinates from our bike theft data set as a matrix
cafes <- st_as_sf(cafes)
cafes_xy <- cafes %>%
st_coordinates()
class(cafes)
cafes <- as_Spatial(cafes)
cafes <- st_as_sf(cafes)
cafes
st_coordinates(cafes)
st_coordinates(st_as_sf(cafes))
cafes$geometry
st_coordinates(st_geometry(cafes))
class(cafes)
View(cafes)
cafes$geometry
cafepoints <- gCentroid(cefs)
cafepoints <- gCentroid(cafes)
library(geojsonio)
cafes <- st_read("osm_raw_data/london_cafes.geojson")
chicken <- st_read("osm_raw_data/london_chicken.geojson")
gails <- st_read("osm_raw_data/london_gails.geojson")
waitrose <- st_read("osm_raw_data/london_waitrose.geojson")
cafes <- st_as_sf(cafes)
cafes%>%st_coordiants()
cafes %>% st_coordinates()
cafes %>%
st_simplify(TRUE, dTolerance = 5000) %>%
st_cast("MULTIPOLYGON") %>%
st_coordinates()
q = st_sfc(st_multipoint(as.matrix(cafes)))
q
setwd("~/Documents/GitHub/london-up-and-coming/osm_points_clean")
gails_points <_ st_read("gails.shp")
gails_points <- st_read("gails.shp")
gails_points <- st_read("osm_points_clean/gails.shp")
gails_points
gails <- st_as_sf(gails)
gails %>% st_coordinates()
st_geometry(gails)
plot(gails)
plot(st_geometry(gails))
gails %>% filter(geometry=POINT)
gails[gails$geometry=="POINT"]
plot(gails_poitns)
gails_points %>% st_coordinates()
cafes <- st_read("osm_points_clean/cafes.geojson")
cafes %>% st_coordinates()
cafes <- st_read("osm_points_clean/cafes.geojson")
chicken <- st_read("osm_points_clean/chicken.shp")
gails <- st_read("osm_points_clean/gails.shp")
waitrose <- st_read("osm_points_clean/waitrose.shp")
library(tidyverse)
library(tmap)
library(sf)
library(sp)
library(rgdal)
library(rgeos)
library(janitor)
library(RColorBrewer)
library(spdep)
library(spatstat)
#London Shapefiles
ldnb <- readOGR("ESRI" ,"London_Borough_Excluding_MHW")
plot(ldnb)
ldnb <- as_Spatial(ldnb)
ldnb <- st_as_sf(ldnb)
#preliminary: points on a map, cafes
tm_shape(ldnb)+
tm_polygons("white", border.col="grey", lwd=1)+
tm_shape(cafes)+
tm_dots(col="red")
#preliminary: points on a map, chicken
tm_shape(ldnb)+
tm_polygons("white", border.col="grey", lwd=1)+
tm_shape(chicken)+
tm_dots(col="blue")
#create list of objects to iterate
objectlist <- list(cafes, chicken, gails, waitrose, ldnb)
#fixing projections, convert efverything into sf
for (object in objectlist){
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
object <- st_as_sf(object)
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
#fixing projections, convert efverything into sf
for (object in objectlist){
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
object <- st_as_sf(object)
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
#fixing projections, convert efverything into sf
ldnb <- st_transform(ldnb, crs=27700)
for (object in objectlist){
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
object <- st_as_sf(object)
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
st_crs(cafes)
#create list of objects to iterate
objectlist <- list(cafes, chicken, gails, waitrose, ldnb)
#fixing projections, convert efverything into sf
ldnb <- st_transform(ldnb, crs=27700)
for (object in objectlist){
object <- st_as_sf(object)
object <- st_transform(object, crs=27700)
st_crs(object)=st_crs(ldnb)
print(st_crs(object))
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
st_crs(cafes) = st_crs(ldnb)
st_crs(gails) = st_crs(ldnb)
st_crs(chicken) = st_crs(ldnb)
st_crs(waitrose) = st_crs(ldnb)
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
st_crs(ldnb)
st_crs(waitrose)
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
st_crs(cafes)
cafes <- st_transform(cafes, crs=st_crs(ldnb))
cafes %>% st_intersection(ldnb)
#create list of objects to iterate
objectlist <- list(cafes, chicken, gails, waitrose)
#fixing projections, convert efverything into sf
ldnb <- st_transform(ldnb, crs=27700)
for (object in objectlist){
object <- st_as_sf(object)
object <- st_transform(object, crs=st_crs(ldnb))
st_crs(object)=st_crs(ldnb)
print(st_crs(object))
return(object)
}
#remove the points which lie outside of London
for (object in objectlist){
object <- object %>% st_intersection(ldnb)
return(object)
}
# create a window of observation
window <- as.owin(ldnb)
cafes_xy <- cafes %>%
st_coordinates()
# create a ppp object
cafes_ppp <- ppp(x = cafes_xy[, 1], y = cafes_xy[, 2], window = window)
# plot our ppp object
plot(cafes_ppp)
plot(cafes)
cafes_xy
# create a ppp object
cafes_ppp <- ppp(x = cafes_xy[, 2], y = cafes_xy[, 1], window = window)
# plot our ppp object
plot(cafes_ppp)
#dealing with duplicates
# check for duplicates using
anyDuplicated(cafes_ppp)
# add an offset to our points using the rjitter function
cafes_ppp_jitter <- rjitter(cafes_ppp, retry = TRUE, nsim = 1, drop = TRUE)
# count the number of duplicated points of the new jitter data set
anyDuplicated(cafes_ppp_jitter)
# plot the resulting ppp object
plot(cafes_ppp_jitter)
cafes_xy <- cafes %>%
st_coordinates()
plot(cafes_xy)
st_crs(ldnb)
# extract coordinates
cafes <- st_as_sf(cafes)
cafes_xy <- cafes %>%
st_coordinates()
plot(cafes_xy)
# create a ppp object
cafes_ppp <- ppp(x = cafes_xy[, 1], y = cafes_xy[, 2], window = window)
# plot our ppp object
plot(cafes_ppp)
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_xy, sigma = 1000))
# create a window of observation
window <- as.owin(ldnb)
cafes_xy[, 1]
# create a ppp object
cafes_ppp <- ppp(x = cafes_xy[, 1], y = cafes_xy[, 2], window = window)
# plot our ppp object
plot(cafes_ppp)
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_ppp_jitter, sigma = 1000))
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_ppp_jitter, sigma = 100))
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_ppp_jitter, sigma = 10))
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_ppp_jitter, sigma = 1))
# kernel density estimation of our bike theft ppp object with 1000m bandwith
plot(density.ppp(cafes_ppp_jitter, sigma = 0.1))
# extract coordinates
cafes <- st_as_sf(cafes)
cafes_xy <- cafes %>%
st_coordinates()
plot(cafes_xy)
library(ggmap)
library(stringr)
library(viridis)
map_sf <- get_map('London', zoom = 7, maptype = 'satellite')
?register_google
get_stamenmap("London", zoom = 7, maptype = "toner-lite")
?get_openstreetmap
london_bbox <- c(-0.587769,51.316881,0.291138,51.669148)
londonmap <- get_stamenmap(london_bbox, zoom = 7, maptype = "toner-lite")
cafes_xy
#check the points
ggplot() +
geom_point(data = cafes_xy, aes(x = X, y = Y), alpha = .05)
cafes_xy <- cafes %>%
st_coordinates() %>%
as.data.frame()
#check the points
ggplot() +
geom_point(data = cafes_xy, aes(x = X, y = Y), alpha = .05)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F)
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha=0.5)  +
scale_fill_viridis(option = 'inferno')
ggmap(londonmap)
londonmap <- get_stamenmap(london_bbox, zoom = 10, maptype = "toner-lite")
ggmap(londonmap)
londonmap <- get_stamenmap(london_bbox, zoom = 12, maptype = "toner-lite")
londonmap <- get_stamenmap(london_bbox, zoom = 12, maptype = "toner-lite")
ggmap(londonmap)
londonmap <- get_stamenmap(london_bbox, zoom = 10, maptype = "toner-lite")
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha=0.5)  +
scale_fill_viridis(option = 'inferno')
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density.., breaks=c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80)), geom = 'tile', contour = F, alpha=0.5)  +
scale_fill_viridis(option = 'inferno')
window <- as.owin(ldnb)
cafes_ppp <- ppp(x = cafes_xy[, 1], y = cafes_xy[, 2], window = window)
plot(cafes_ppp)
gails <- st_as_sf(gails)
gails_xy <- gails %>%
st_coordinates() %>%
as.data.frame()
plot(gails_xy)
gails_ppp <- ppp(x = gails_xy[, 1], y = gails_xy[, 2], window = window)
plot(gails_ppp)
plot(density.ppp(gails_ppp, sigma = 1000))
plot(density.ppp(gails_ppp, sigma = 10000))
plot(density.ppp(gails_ppp, sigma = 1))
as.owin(ldnb)
plot(ldnb)
plot(ldnb)
plot(gails)
plot(ldnb)
plot(gails, add=T)
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..,), geom = 'tile', contour = F, alpha=0.5)  +
scale_fill_viridis(option = 'inferno')
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..,), geom = 'tile', contour = F, alpha=0.5, bins=20)  +
scale_fill_viridis(option = 'inferno')
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T, bins=100)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T)
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..,), geom = 'tile', contour = F, alpha=0.5, bins=20)  +
scale_fill_viridis(option = 'inferno')
#basic heatmap
ggplot() +
stat_density2d(data = gails_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T)
ggmap(londonmap) +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..,), geom = 'tile', contour = T, alpha=0.5, bins=100)  +
scale_fill_viridis(option = 'inferno')
cafes <- st_as_sf(cafes)
cafes_xy <- cafes %>%
st_coordinates() %>%
as.data.frame()
plot(cafes_xy)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = density), geom = 'tile', contour = T)
#check the points
ggplot() +
geom_point(data = cafes_xy, aes(x = X, y = Y), alpha = .05)
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y), geom = 'tile', contour = T)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill=density), geom = 'tile', contour = T)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill=..density..), geom = 'tile', contour = T)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T, alpha = .5)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=100)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=1000)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=1)
#basic heatmap
ggplot() +
stat_density(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=1)
#basic heatmap
ggplot() +
stat_density(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = T, alpha = .5, bins=1)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=100)
#basic heatmap
ggplot() +
stat_density2d(data = cafes_xy, aes(x = X, y = Y, fill = ..density..), geom = 'tile', contour = F, alpha = .5, bins=500)
cafe_points#object with all the points
## hegaons
```{r}
cafes <- as_Spatial(cafes)
plot(st_geometry(cafes))
plot(st_geometry(cafes))
cafes <- st_as_sf(cafes)
plot(st_geometry(cafes))
cafes <- as_Spatial(Cafes)
cafes <- as_Spatial(cafes)
area_honeycomb_grid <-
st_make_grid(st_geometry(cafes, what="polygons", square=FALSE, cellsize=0.6)
plot(cafes) #this is just a sheet of grids
st_make_grid(st_geometry(cafes, what="polygons", square=FALSE, cellsize=0.6)
area_honeycomb_grid <-
area_honeycomb_grid <-
st_make_grid(st_geometry(cafes, what="polygons", square=FALSE, cellsize=0.6))
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnb, what="polygons", square=FALSE, cellsize=0.6))
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnb, what="polygons", square=FALSE, cellsize=0.01))
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnb, what="polygons", square=FALSE, cellsize=0.01))
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnb, what="polygons", square=FALSE, cellsize=1))
plot(area_honeycomb_grid) #this is just a sheet of grids
ldnmsoa <- read_sf("ESRI/MSOA_2011_London_gen_MHW.shp")
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnmsoa , what="polygons", square=FALSE, cellsize=1))
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnmsoa , what="polygons", square=FALSE, cellsize=10))
plot(area_honeycomb_grid) #this is just a sheet of grids
st_geometry(ldnmsoa)
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnmsoa) , what="polygons", square=FALSE, cellsize=0.01)
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnmsoa) , what="polygons", square=FALSE, cellsize=1)
plot(area_honeycomb_grid) #this is just a sheet of grids
area_honeycomb_grid <-
st_make_grid(st_geometry(ldnmsoa) , what="polygons", square=FALSE, cellsize=1)
